@model IEnumerable<_2211_Final_Project_TGM_Blog.Models.Blog.BlogPost>
@inject UserManager<IdentityUser> UserManager
@inject LikeService likeService
@{
    var currentUser = UserManager.GetUserAsync(User).Result;
    bool isDev = currentUser != null && UserManager.IsInRoleAsync(currentUser, "Dev").Result;
    bool isAuthenticated = User.Identity.IsAuthenticated;
    bool userLikedPost = false;
    var likeId = -1;
    var title = "Developer Log";
    ViewData["Title"] = title;
}

<h2 class="display-4 mb-1 text-center">Into the Great Muscaria</h2>
<h4 class="display-5 mb-4 text-center">@title</h4>

<!-- if the user is a Developer, they get access to a create blog button -->
<div class="d-flex flex-column align-items-center justify-content-center mb-2 text-center">
    @if (isDev)
    {
        <a asp-controller="Blog" asp-action="CreateBlogPost" class="btn btn-primary col-sm-2">
            Create Blog Post
        </a>
        <form class="col-sm-2 mt-2" asp-action="MakeUserUser" asp-route-userId="@currentUser.Id" method="post">
            <button type="submit" class="btn btn-success">
                Revert Role
            </button>
        </form>
    }
    else if (isAuthenticated)
    {
        <form class="col-sm-2 mt-2" asp-action="MakeUserDev" asp-route-userId="@currentUser.Id" method="post">
            <button type="submit" class="btn btn-success">
                Get Dev Role
            </button>
        </form>
    }
</div>

@if (Model.Any())
{
    <div class="d-flex flex-column align-items-center justify-content-center mb-2">
        @foreach (var post in Model.Reverse())
        {
            <div class="card mb-2 col-lg-12" style="max-width: 500px">
                <!-- if a user is a developer they may delete a blog post -->
                @if (isDev)
                {
                    <div class="d-flex align-items-end justify-content-end">
                        <form asp-action="Delete" asp-route-postId="@post.Id" method="post" class="delBtn">
                            <button type="submit" value="Delete" class="btn btn-link" style="color:darkslategrey">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-x" viewBox="0 0 16 16">
                                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708" />
                                </svg>
                            </button>
                        </form>
                    </div>
                }
                <div class="card-body d-flex flex-column align-items-center justify-content-center">
                    @if (post.ImageUrl is not null)
                    {
                        <img class="card-img" src="@post.ImageUrl"
                        alt="Blog Image"
                        class="card-image img-fluid rounded-3 border-5 border-secondary"
                        style="max-width: 100%; max-height: 100%;" />
                    }
                    <h5 class="card-title">@post.Title</h5>
                    <h6 class=""></h6>
                    <p class="card-text">@post.Content</p>
                </div>
                <div class="likes-section">
                    <!-- generating all relevant information for the like button partial view -->
                    @if (isAuthenticated) { userLikedPost = await likeService.HasUserLikedPost(post.Id, currentUser.Id); }
                    @if (userLikedPost) { likeId = await likeService.GetLikeId(post.Id, currentUser.Id); }
                    @await Html.PartialAsync("_LikeButtonPartial",
                    new _2211_Final_Project_TGM_Blog.Models.Blog.LikeButtonModel
                    {
                        IsAuthenticated = isAuthenticated,
                        UserLikedPost = userLikedPost,
                        LikeId = likeId,
                        PostId = post.Id,
                        LikeQTY = await likeService.GetLikes(post.Id)
                    })
                </div>
            </div>
        }
    </div>
}
else
{
    <p>No blog posts available.</p>
}

<!-- Importing scripts for asynchronous likes. Jquery used for simplicity.-->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
//function that handles the like button updating and submission
    $(document).ready(function () 
    {
        $(document).on('click', '.likeBtn', function (e) 
        {
            e.preventDefault();
            var form = $(this).closest('form');
            $.ajax({
                type: form.attr('method'),
                url: form.attr('action'),
                data: form.serialize(),
                success: function (response) 
                {
                    //replaces the existing likes field with the updated one
                    $(form).replaceWith(response);
                },
                error: function () 
                {
                    alert('An error occurred. Please try again.');
                }
            });
        });
    });
    //function that handles the post deleletion
    $(document).ready(function () 
    {
        $(document).on('click', '.delBtn', function (e) 
        {
            e.preventDefault();
            var form = $(this).closest('form');
            if (confirm("Are you sure you want to delete this post?")) 
            {
                $.ajax({
                    type: form.attr('method'),
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function (response) 
                    {
                        //reloads the page upon deletion
                        location.reload();
                    },
                    error: function () 
                    {
                        alert('An error occurred. Please try again.');
                    }
                });
            }
        });
    });
</script>
